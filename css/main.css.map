{"version":3,"sources":["components/_icons.scss","components/_buttons.scss","sections/_carousel-banner.scss","bootstrap/mixins/_breakpoints.scss","bootstrap/mixins/_grid.scss","sections/_footer.scss","core/_functions.scss"],"names":[],"mappings":"AAKA,WACC,4BANqC,CAOrC,uNAJuG,CAOxG,gBAEC,YAAa,CACb,uCAKA,qCAAsC,CACtC,iBAAkB,CAClB,6BAA8B,CAC9B,mBAAoB,CACpB,mBAAoB,CACpB,aAAc,CACd,kCAAmC,CACnC,iCAAkC,CAClC,2DAqBA,WAlBa,CAAO,iEAqBa,WApBjB,CAAA,iEAwBW,WAvBX,CAAA,mDA2BI,WA1BX,CAAA,uDA8Ba,WACf,CA9BI,2DAiCa,WACxB,CAAO,2DAGiB,WACxB,CAAA,2DAGwB,WACxB,CAAA,uDAGS,WACT,CAAA,qDAGS,WACT,CAAA,mDAGS,WACT,CAAA,yDAGS,WACT,CAAA,6CAGS,WAAc,CACvB,qDAGS,WAAY,CAAM,aAxDV,UA0DjB,CAAA,4BCjGC,iBCAA,CAAA,0BCyDU,4BD3DZ,iBAKG,CAAA,KAAU,CAAA,QACV,CAAA,OACA,CAAA,MACA,CAAA,CAAA,0BCmDS,uBD9CX,YAAA,CAAO,aE0BgC,CAItC,eAWA,CAAA,CAAA,cCvDF,kBACC,CAAA,QCAQ,CAAA,0BDEG","file":"main.css","sourcesContent":["$supernova-icon-font: \"supernova-icon\";\n\n$supernova-icon-asset: url(\"/sandandsky-styleguides/fonts/supernova-icon.woff2?63862872377b5d84703019c9b00f1d8f\") format(\"woff2\"),\nurl(\"/sandandsky-styleguides/fonts/supernova-icon.woff?63862872377b5d84703019c9b00f1d8f\") format(\"woff\") !default;\n\n@font-face {\n\tfont-family: $supernova-icon-font;\n\tsrc: $supernova-icon-asset;\n}\n\n.sni,\n.sni-after {\n\tdisplay: flex;\n}\n\n.sni-text,\n.sni:before,\n.sni-after:after {\n\tfont-family: supernova-icon !important;\n\tfont-style: normal;\n\tfont-weight: normal !important;\n\tfont-variant: normal;\n\ttext-transform: none;\n\tline-height: 1;\n\t-webkit-font-smoothing: antialiased;\n\t-moz-osx-font-smoothing: grayscale;\n}\n\n$supernova-icon-map: (\n\t\"australia\": \"\\f101\",\n\t\"chevron-next\": \"\\f102\",\n\t\"chevron-prev\": \"\\f103\",\n\t\"koala\": \"\\f104\",\n\t\"nasties\": \"\\f105\",\n\t\"range-aea\": \"\\f106\",\n\t\"range-apc\": \"\\f107\",\n\t\"range-tsw\": \"\\f108\",\n\t\"returns\": \"\\f109\",\n\t\"search\": \"\\f10a\",\n\t\"shake\": \"\\f10b\",\n\t\"shipping\": \"\\f10c\",\n\t\"ss\": \"\\f10d\",\n\t\"trophy\": \"\\f10e\",\n);\n\n.sni.sni__australia:before,\n.sni-after.sni__australia:after {\n\tcontent: map-get($supernova-icon-map, \"australia\");\n}\n.sni.sni__chevron-next:before,\n.sni-after.sni__chevron-next:after {\n\tcontent: map-get($supernova-icon-map, \"chevron-next\");\n}\n.sni.sni__chevron-prev:before,\n.sni-after.sni__chevron-prev:after {\n\tcontent: map-get($supernova-icon-map, \"chevron-prev\");\n}\n.sni.sni__koala:before,\n.sni-after.sni__koala:after {\n\tcontent: map-get($supernova-icon-map, \"koala\");\n}\n.sni.sni__nasties:before,\n.sni-after.sni__nasties:after {\n\tcontent: map-get($supernova-icon-map, \"nasties\");\n}\n.sni.sni__range-aea:before,\n.sni-after.sni__range-aea:after {\n\tcontent: map-get($supernova-icon-map, \"range-aea\");\n}\n.sni.sni__range-apc:before,\n.sni-after.sni__range-apc:after {\n\tcontent: map-get($supernova-icon-map, \"range-apc\");\n}\n.sni.sni__range-tsw:before,\n.sni-after.sni__range-tsw:after {\n\tcontent: map-get($supernova-icon-map, \"range-tsw\");\n}\n.sni.sni__returns:before,\n.sni-after.sni__returns:after {\n\tcontent: map-get($supernova-icon-map, \"returns\");\n}\n.sni.sni__search:before,\n.sni-after.sni__search:after {\n\tcontent: map-get($supernova-icon-map, \"search\");\n}\n.sni.sni__shake:before,\n.sni-after.sni__shake:after {\n\tcontent: map-get($supernova-icon-map, \"shake\");\n}\n.sni.sni__shipping:before,\n.sni-after.sni__shipping:after {\n\tcontent: map-get($supernova-icon-map, \"shipping\");\n}\n.sni.sni__ss:before,\n.sni-after.sni__ss:after {\n\tcontent: map-get($supernova-icon-map, \"ss\");\n}\n.sni.sni__trophy:before,\n.sni-after.sni__trophy:after {\n\tcontent: map-get($supernova-icon-map, \"trophy\");\n}\n",".btn {\n\t&-primary {\n\t\tcolor: $white;\n\t}\n}\n","\n.carousel-banner {\n\tfigcaption {\n\t\tposition: relative;\n\n\t\t@include media-breakpoint-up(lg) {\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tbottom: 0;\n\t\t\tright: 0;\n\t\t\tleft: 0;\n\t\t}\n\t}\n\n\t&__text {\n\t\t@include media-breakpoint-up(lg) {\n\t\t\t@include make-col(3, 5);\n\t\t\t@include make-col-offset(1, 5);\n\t\t}\n\t}\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","/// Grid system\n//\n// Generate semantic grid columns with these mixins.\n\n@mixin make-container($gutter: $grid-gutter-width) {\n  width: 100%;\n  padding-right: $gutter / 2;\n  padding-left: $gutter / 2;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n@mixin make-row($gutter: $grid-gutter-width) {\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: -$gutter / 2;\n  margin-left: -$gutter / 2;\n}\n\n// For each breakpoint, define the maximum width of the container in a media query\n@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {\n  @each $breakpoint, $container-max-width in $max-widths {\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      max-width: $container-max-width;\n    }\n  }\n  @include deprecate(\"The `make-container-max-widths` mixin\", \"v4.5.2\", \"v5\");\n}\n\n@mixin make-col-ready($gutter: $grid-gutter-width) {\n  position: relative;\n  // Prevent columns from becoming too narrow when at smaller grid tiers by\n  // always setting `width: 100%;`. This works because we use `flex` values\n  // later on to override this initial width.\n  width: 100%;\n  padding-right: $gutter / 2;\n  padding-left: $gutter / 2;\n}\n\n@mixin make-col($size, $columns: $grid-columns) {\n  flex: 0 0 percentage($size / $columns);\n  // Add a `max-width` to ensure content within each column does not blow out\n  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari\n  // do not appear to require this.\n  max-width: percentage($size / $columns);\n}\n\n@mixin make-col-auto() {\n  flex: 0 0 auto;\n  width: auto;\n  max-width: 100%; // Reset earlier grid tiers\n}\n\n@mixin make-col-offset($size, $columns: $grid-columns) {\n  $num: $size / $columns;\n  margin-left: if($num == 0, 0, percentage($num));\n}\n\n// Row columns\n//\n// Specify on a parent element(e.g., .row) to force immediate children into NN\n// numberof columns. Supports wrapping to new lines, but does not do a Masonry\n// style grid.\n@mixin row-cols($count) {\n  > * {\n    flex: 0 0 100% / $count;\n    max-width: 100% / $count;\n  }\n}\n",".navbar-brand {\n\tfont-size: calc-em(45);\n\tleft: 50%;\n\ttransform: translateX(-50%);\n}\n","@function calc-em($pixels, $context: 16, $unit: 1em) {\n\t@return $pixels / $context * $unit;\n}\n\n@function asset-url($filename) {\n\t@return '/sandandsky-styleguides/images/' + $filename;\n\n\t// For Shopify\n\t// @return \"{{ '\" + $filename + \"' | asset_url }}\";\n}\n\n@function font-url($filename) {\n\t@return '/sandandsky-styleguides/fonts/' + $filename;\n\n\t// For Shopify\n\t// @return \"{{ '\" + $filename + \"' | asset_url }}\";\n}\n"]}